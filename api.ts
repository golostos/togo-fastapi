/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const EmulatorState = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type EmulatorState = typeof EmulatorState[keyof typeof EmulatorState];


/**
 * 
 * @export
 * @interface EnterSmsCodeErrorModel
 */
export interface EnterSmsCodeErrorModel {
    /**
     * 
     * @type {string}
     * @memberof EnterSmsCodeErrorModel
     */
    'error_message': string;
    /**
     * 
     * @type {string}
     * @memberof EnterSmsCodeErrorModel
     */
    'emulator_logs': string;
}
/**
 * 
 * @export
 * @interface EnterSmsCodeResponseModel
 */
export interface EnterSmsCodeResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof EnterSmsCodeResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnterSmsCodeResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {EnterSmsCodeResultModel}
     * @memberof EnterSmsCodeResponseModel
     */
    'result'?: EnterSmsCodeResultModel;
    /**
     * 
     * @type {EnterSmsCodeErrorModel}
     * @memberof EnterSmsCodeResponseModel
     */
    'error'?: EnterSmsCodeErrorModel;
    /**
     * 
     * @type {number}
     * @memberof EnterSmsCodeResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface EnterSmsCodeResultModel
 */
export interface EnterSmsCodeResultModel {
    /**
     * 
     * @type {Array<string>}
     * @memberof EnterSmsCodeResultModel
     */
    'profiles'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof EnterSmsCodeResultModel
     */
    'is_need_select_profile'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnterSmsCodeResultModel
     */
    'is_account_identified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnterSmsCodeResultModel
     */
    'balance'?: string;
}
/**
 * 
 * @export
 * @interface GetSessionStateErrorModel
 */
export interface GetSessionStateErrorModel {
    /**
     * 
     * @type {string}
     * @memberof GetSessionStateErrorModel
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetSessionStateResponseModel
 */
export interface GetSessionStateResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof GetSessionStateResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetSessionStateResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetSessionStateResponseModel
     */
    'code'?: number;
    /**
     * 
     * @type {GetSessionStateResultModel}
     * @memberof GetSessionStateResponseModel
     */
    'result'?: GetSessionStateResultModel;
    /**
     * 
     * @type {GetSessionStateErrorModel}
     * @memberof GetSessionStateResponseModel
     */
    'error'?: GetSessionStateErrorModel;
}
/**
 * 
 * @export
 * @interface GetSessionStateResultModel
 */
export interface GetSessionStateResultModel {
    /**
     * 
     * @type {string}
     * @memberof GetSessionStateResultModel
     */
    'emulator_name': string;
    /**
     * 
     * @type {EmulatorState}
     * @memberof GetSessionStateResultModel
     */
    'emulator_state': EmulatorState;
    /**
     * 
     * @type {string}
     * @memberof GetSessionStateResultModel
     */
    'last_action_date': string;
    /**
     * 
     * @type {SessionStatus}
     * @memberof GetSessionStateResultModel
     */
    'session_state': SessionStatus;
}


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InputPasswordErrorModel
 */
export interface InputPasswordErrorModel {
    /**
     * 
     * @type {string}
     * @memberof InputPasswordErrorModel
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface InputPasswordRequest
 */
export interface InputPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof InputPasswordRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputPasswordRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InputPasswordResponseModel
 */
export interface InputPasswordResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof InputPasswordResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InputPasswordResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {InputPasswordResultModel}
     * @memberof InputPasswordResponseModel
     */
    'result'?: InputPasswordResultModel;
    /**
     * 
     * @type {InputPasswordErrorModel}
     * @memberof InputPasswordResponseModel
     */
    'error'?: InputPasswordErrorModel;
    /**
     * 
     * @type {number}
     * @memberof InputPasswordResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface InputPasswordResultModel
 */
export interface InputPasswordResultModel {
    /**
     * 
     * @type {string}
     * @memberof InputPasswordResultModel
     */
    'session_id': string;
}
/**
 * 
 * @export
 * @interface InputPhoneNumberErrorModel
 */
export interface InputPhoneNumberErrorModel {
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberErrorModel
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface InputPhoneNumberRequest
 */
export interface InputPhoneNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberRequest
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface InputPhoneNumberResponseModel
 */
export interface InputPhoneNumberResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof InputPhoneNumberResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {InputPhoneNumberErrorModel}
     * @memberof InputPhoneNumberResponseModel
     */
    'error'?: InputPhoneNumberErrorModel;
    /**
     * 
     * @type {number}
     * @memberof InputPhoneNumberResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface InputSmsAuthRequest
 */
export interface InputSmsAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof InputSmsAuthRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputSmsAuthRequest
     */
    'sms_code': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface PayErrorModel
 */
export interface PayErrorModel {
    /**
     * 
     * @type {string}
     * @memberof PayErrorModel
     */
    'error_message': string;
    /**
     * 
     * @type {string}
     * @memberof PayErrorModel
     */
    'emulator_logs': string;
    /**
     * 
     * @type {string}
     * @memberof PayErrorModel
     */
    'console_out'?: string;
}
/**
 * 
 * @export
 * @interface PayRequest
 */
export interface PayRequest {
    /**
     * 
     * @type {string}
     * @memberof PayRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof PayRequest
     */
    'pay_link': string;
}
/**
 * 
 * @export
 * @interface PayResponseModel
 */
export interface PayResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof PayResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PayResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {PayResultModel}
     * @memberof PayResponseModel
     */
    'result'?: PayResultModel;
    /**
     * 
     * @type {PayErrorModel}
     * @memberof PayResponseModel
     */
    'error'?: PayErrorModel;
    /**
     * 
     * @type {number}
     * @memberof PayResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface PayResultModel
 */
export interface PayResultModel {
    /**
     * 
     * @type {string}
     * @memberof PayResultModel
     */
    'balance': string;
    /**
     * 
     * @type {string}
     * @memberof PayResultModel
     */
    'emulator_logs': string;
}
/**
 * 
 * @export
 * @interface ResponseModel
 */
export interface ResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof ResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface SelectAccountErrorModel
 */
export interface SelectAccountErrorModel {
    /**
     * 
     * @type {string}
     * @memberof SelectAccountErrorModel
     */
    'error_message': string;
    /**
     * 
     * @type {string}
     * @memberof SelectAccountErrorModel
     */
    'emulator_logs': string;
}
/**
 * 
 * @export
 * @interface SelectAccountRequest
 */
export interface SelectAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof SelectAccountRequest
     */
    'session_id': string;
    /**
     * 
     * @type {number}
     * @memberof SelectAccountRequest
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof SelectAccountRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SelectAccountResponseModel
 */
export interface SelectAccountResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof SelectAccountResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SelectAccountResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {SelectAccountResultModel}
     * @memberof SelectAccountResponseModel
     */
    'result'?: SelectAccountResultModel;
    /**
     * 
     * @type {SelectAccountErrorModel}
     * @memberof SelectAccountResponseModel
     */
    'error'?: SelectAccountErrorModel;
    /**
     * 
     * @type {number}
     * @memberof SelectAccountResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface SelectAccountResultModel
 */
export interface SelectAccountResultModel {
    /**
     * 
     * @type {boolean}
     * @memberof SelectAccountResultModel
     */
    'is_account_identified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SelectAccountResultModel
     */
    'balance'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const SessionStatus = {
    NUMBER_MINUS_1: -1,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type SessionStatus = typeof SessionStatus[keyof typeof SessionStatus];


/**
 * 
 * @export
 * @interface StartSessionErrorModel
 */
export interface StartSessionErrorModel {
    /**
     * 
     * @type {string}
     * @memberof StartSessionErrorModel
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface StartSessionResponseModel
 */
export interface StartSessionResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof StartSessionResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StartSessionResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {StartSessionResultModel}
     * @memberof StartSessionResponseModel
     */
    'result'?: StartSessionResultModel;
    /**
     * 
     * @type {StartSessionErrorModel}
     * @memberof StartSessionResponseModel
     */
    'error'?: StartSessionErrorModel;
    /**
     * 
     * @type {number}
     * @memberof StartSessionResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface StartSessionResultModel
 */
export interface StartSessionResultModel {
    /**
     * 
     * @type {string}
     * @memberof StartSessionResultModel
     */
    'session_id': string;
}
/**
 * 
 * @export
 * @interface StopSessionRequest
 */
export interface StopSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof StopSessionRequest
     */
    'session_id': string;
}
/**
 * 
 * @export
 * @interface StopSessionResponseModel
 */
export interface StopSessionResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof StopSessionResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopSessionResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof StopSessionResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * EmulatorInteractionApi - axios parameter creator
 * @export
 */
export const EmulatorInteractionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Enter sms auth code
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterSmsAuth: async (inputSmsAuthRequest: InputSmsAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputSmsAuthRequest' is not null or undefined
            assertParamExists('enterSmsAuth', 'inputSmsAuthRequest', inputSmsAuthRequest)
            const localVarPath = `/enter_sms_auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputSmsAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get session state
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionState: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionState', 'sessionId', sessionId)
            const localVarPath = `/session_state/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Input phone number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPhoneNumber: async (inputPhoneNumberRequest: InputPhoneNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputPhoneNumberRequest' is not null or undefined
            assertParamExists('inputPhoneNumber', 'inputPhoneNumberRequest', inputPhoneNumberRequest)
            const localVarPath = `/input_phone_number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputPhoneNumberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Input wallet password
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputWalletPassword: async (inputPasswordRequest: InputPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputPasswordRequest' is not null or undefined
            assertParamExists('inputWalletPassword', 'inputPasswordRequest', inputPasswordRequest)
            const localVarPath = `/input_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pay: async (payRequest: PayRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payRequest' is not null or undefined
            assertParamExists('pay', 'payRequest', payRequest)
            const localVarPath = `/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Select account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAccount: async (selectAccountRequest: SelectAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selectAccountRequest' is not null or undefined
            assertParamExists('selectAccount', 'selectAccountRequest', selectAccountRequest)
            const localVarPath = `/select_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selectAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start emulator session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/start_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop emulator session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSession: async (stopSessionRequest: StopSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stopSessionRequest' is not null or undefined
            assertParamExists('stopSession', 'stopSessionRequest', stopSessionRequest)
            const localVarPath = `/stop_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stopSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmulatorInteractionApi - functional programming interface
 * @export
 */
export const EmulatorInteractionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmulatorInteractionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Enter sms auth code
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enterSmsAuth(inputSmsAuthRequest: InputSmsAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnterSmsCodeResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enterSmsAuth(inputSmsAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get session state
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionState(sessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSessionStateResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionState(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Input phone number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inputPhoneNumber(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InputPhoneNumberResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inputPhoneNumber(inputPhoneNumberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Input wallet password
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inputWalletPassword(inputPasswordRequest: InputPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InputPasswordResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inputWalletPassword(inputPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pay(payRequest: PayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pay(payRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Select account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAccount(selectAccountRequest: SelectAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectAccountResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAccount(selectAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start emulator session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartSessionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stop emulator session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopSession(stopSessionRequest: StopSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StopSessionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopSession(stopSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmulatorInteractionApi - factory interface
 * @export
 */
export const EmulatorInteractionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmulatorInteractionApiFp(configuration)
    return {
        /**
         * 
         * @summary Enter sms auth code
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterSmsAuth(inputSmsAuthRequest: InputSmsAuthRequest, options?: any): AxiosPromise<EnterSmsCodeResponseModel> {
            return localVarFp.enterSmsAuth(inputSmsAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get session state
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionState(sessionId: string, options?: any): AxiosPromise<GetSessionStateResponseModel> {
            return localVarFp.getSessionState(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Input phone number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPhoneNumber(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: any): AxiosPromise<InputPhoneNumberResponseModel> {
            return localVarFp.inputPhoneNumber(inputPhoneNumberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Input wallet password
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputWalletPassword(inputPasswordRequest: InputPasswordRequest, options?: any): AxiosPromise<InputPasswordResponseModel> {
            return localVarFp.inputWalletPassword(inputPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pay(payRequest: PayRequest, options?: any): AxiosPromise<PayResponseModel> {
            return localVarFp.pay(payRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Select account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAccount(selectAccountRequest: SelectAccountRequest, options?: any): AxiosPromise<SelectAccountResponseModel> {
            return localVarFp.selectAccount(selectAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start emulator session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession(options?: any): AxiosPromise<StartSessionResponseModel> {
            return localVarFp.startSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop emulator session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSession(stopSessionRequest: StopSessionRequest, options?: any): AxiosPromise<StopSessionResponseModel> {
            return localVarFp.stopSession(stopSessionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmulatorInteractionApi - object-oriented interface
 * @export
 * @class EmulatorInteractionApi
 * @extends {BaseAPI}
 */
export class EmulatorInteractionApi extends BaseAPI {
    /**
     * 
     * @summary Enter sms auth code
     * @param {InputSmsAuthRequest} inputSmsAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public enterSmsAuth(inputSmsAuthRequest: InputSmsAuthRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).enterSmsAuth(inputSmsAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get session state
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public getSessionState(sessionId: string, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).getSessionState(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Input phone number
     * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public inputPhoneNumber(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).inputPhoneNumber(inputPhoneNumberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Input wallet password
     * @param {InputPasswordRequest} inputPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public inputWalletPassword(inputPasswordRequest: InputPasswordRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).inputWalletPassword(inputPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pay
     * @param {PayRequest} payRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public pay(payRequest: PayRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).pay(payRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Select account
     * @param {SelectAccountRequest} selectAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public selectAccount(selectAccountRequest: SelectAccountRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).selectAccount(selectAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start emulator session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public startSession(options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).startSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop emulator session
     * @param {StopSessionRequest} stopSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public stopSession(stopSessionRequest: StopSessionRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).stopSession(stopSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


