/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InputPasswordRequest
 */
export interface InputPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof InputPasswordRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputPasswordRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InputPhoneNumberRequest
 */
export interface InputPhoneNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputPhoneNumberRequest
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface InputSmsAuthRequest
 */
export interface InputSmsAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof InputSmsAuthRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof InputSmsAuthRequest
     */
    'sms_code': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface PayRequest
 */
export interface PayRequest {
    /**
     * 
     * @type {string}
     * @memberof PayRequest
     */
    'session_id': string;
    /**
     * 
     * @type {string}
     * @memberof PayRequest
     */
    'pay_link': string;
}
/**
 * 
 * @export
 * @interface ResponseModel
 */
export interface ResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof ResponseModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponseModel
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ResponseModel
     */
    'result'?: object;
    /**
     * 
     * @type {object}
     * @memberof ResponseModel
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof ResponseModel
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface SelectAccountRequest
 */
export interface SelectAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof SelectAccountRequest
     */
    'session_id': string;
    /**
     * 
     * @type {number}
     * @memberof SelectAccountRequest
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof SelectAccountRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface StopSessionRequest
 */
export interface StopSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof StopSessionRequest
     */
    'session_id': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * EmulatorInteractionApi - axios parameter creator
 * @export
 */
export const EmulatorInteractionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Enter Sms Auth
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterSmsAuthPost: async (inputSmsAuthRequest: InputSmsAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputSmsAuthRequest' is not null or undefined
            assertParamExists('enterSmsAuthPost', 'inputSmsAuthRequest', inputSmsAuthRequest)
            const localVarPath = `/enter_sms_auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputSmsAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPasswordPost: async (inputPasswordRequest: InputPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputPasswordRequest' is not null or undefined
            assertParamExists('inputPasswordPost', 'inputPasswordRequest', inputPasswordRequest)
            const localVarPath = `/input_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPhoneNumberPost: async (inputPhoneNumberRequest: InputPhoneNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inputPhoneNumberRequest' is not null or undefined
            assertParamExists('inputPhoneNumberPost', 'inputPhoneNumberRequest', inputPhoneNumberRequest)
            const localVarPath = `/input_phone_number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputPhoneNumberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPost: async (payRequest: PayRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payRequest' is not null or undefined
            assertParamExists('payPost', 'payRequest', payRequest)
            const localVarPath = `/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Select Account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAccountPost: async (selectAccountRequest: SelectAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selectAccountRequest' is not null or undefined
            assertParamExists('selectAccountPost', 'selectAccountRequest', selectAccountRequest)
            const localVarPath = `/select_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selectAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSessionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/start_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop Session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSessionPost: async (stopSessionRequest: StopSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stopSessionRequest' is not null or undefined
            assertParamExists('stopSessionPost', 'stopSessionRequest', stopSessionRequest)
            const localVarPath = `/stop_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stopSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmulatorInteractionApi - functional programming interface
 * @export
 */
export const EmulatorInteractionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmulatorInteractionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Enter Sms Auth
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enterSmsAuthPost(inputSmsAuthRequest: InputSmsAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enterSmsAuthPost(inputSmsAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inputPasswordPost(inputPasswordRequest: InputPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inputPasswordPost(inputPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inputPhoneNumberPost(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inputPhoneNumberPost(inputPhoneNumberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPost(payRequest: PayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPost(payRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Select Account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAccountPost(selectAccountRequest: SelectAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAccountPost(selectAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSessionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSessionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stop Session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopSessionPost(stopSessionRequest: StopSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopSessionPost(stopSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmulatorInteractionApi - factory interface
 * @export
 */
export const EmulatorInteractionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmulatorInteractionApiFp(configuration)
    return {
        /**
         * 
         * @summary Enter Sms Auth
         * @param {InputSmsAuthRequest} inputSmsAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterSmsAuthPost(inputSmsAuthRequest: InputSmsAuthRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.enterSmsAuthPost(inputSmsAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPasswordRequest} inputPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPasswordPost(inputPasswordRequest: InputPasswordRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.inputPasswordPost(inputPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Input Phone Number
         * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputPhoneNumberPost(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.inputPhoneNumberPost(inputPhoneNumberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pay
         * @param {PayRequest} payRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPost(payRequest: PayRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.payPost(payRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Select Account
         * @param {SelectAccountRequest} selectAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAccountPost(selectAccountRequest: SelectAccountRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.selectAccountPost(selectAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSessionGet(options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.startSessionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop Session
         * @param {StopSessionRequest} stopSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSessionPost(stopSessionRequest: StopSessionRequest, options?: any): AxiosPromise<ResponseModel> {
            return localVarFp.stopSessionPost(stopSessionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmulatorInteractionApi - object-oriented interface
 * @export
 * @class EmulatorInteractionApi
 * @extends {BaseAPI}
 */
export class EmulatorInteractionApi extends BaseAPI {
    /**
     * 
     * @summary Enter Sms Auth
     * @param {InputSmsAuthRequest} inputSmsAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public enterSmsAuthPost(inputSmsAuthRequest: InputSmsAuthRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).enterSmsAuthPost(inputSmsAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Input Phone Number
     * @param {InputPasswordRequest} inputPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public inputPasswordPost(inputPasswordRequest: InputPasswordRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).inputPasswordPost(inputPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Input Phone Number
     * @param {InputPhoneNumberRequest} inputPhoneNumberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public inputPhoneNumberPost(inputPhoneNumberRequest: InputPhoneNumberRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).inputPhoneNumberPost(inputPhoneNumberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pay
     * @param {PayRequest} payRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public payPost(payRequest: PayRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).payPost(payRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Select Account
     * @param {SelectAccountRequest} selectAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public selectAccountPost(selectAccountRequest: SelectAccountRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).selectAccountPost(selectAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public startSessionGet(options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).startSessionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop Session
     * @param {StopSessionRequest} stopSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmulatorInteractionApi
     */
    public stopSessionPost(stopSessionRequest: StopSessionRequest, options?: AxiosRequestConfig) {
        return EmulatorInteractionApiFp(this.configuration).stopSessionPost(stopSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


